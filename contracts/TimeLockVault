// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract TimeLockVault {
    struct Lock {
        uint256 amount;
        uint256 unlock;
    }
    mapping(address => Lock) public locks;
    event Deposited(address indexed who, uint256 amount, uint256 unlockTime);
    event Withdrawn(address indexed who, uint256 amount);

    function deposit(uint256 delaySeconds) external payable {
        require(msg.value > 0, "send ETH");
        Lock storage l = locks[msg.sender];
        l.amount += msg.value;
        l.unlock = block.timestamp + delaySeconds;
        emit Deposited(msg.sender, msg.value, l.unlock);
    }

    function withdraw() external {
        Lock storage l = locks[msg.sender];
        require(l.amount > 0, "no funds");
        require(block.timestamp >= l.unlock, "locked");
        uint256 amt = l.amount;
        l.amount = 0;
        payable(msg.sender).transfer(amt);
        emit Withdrawn(msg.sender, amt);
    }

    function info(address user) external view returns (uint256 amount, uint256 unlockTime) {
        Lock storage l = locks[user];
        return (l.amount, l.unlock);
    }
}
