// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
contract OpenMintNFT {
    string public name; string public symbol; string public baseURI;
    uint256 private _nextId = 1;
    mapping(uint256=>address) public ownerOfToken;
    mapping(uint256=>string) public messageOf;

    constructor(string memory _name,string memory _symbol,string memory _baseURI){
        name=_name; symbol=_symbol; baseURI=_baseURI;
    }
    function mint(string calldata msgText) external {
        uint256 id = _nextId++;
        ownerOfToken[id]=msg.sender;
        messageOf[id]=msgText;
    }
    function tokenURI(uint256 id) public view returns(string memory){ return string(abi.encodePacked(baseURI,_toString(id))); }
    function _toString(uint256 v) internal pure returns(string memory){ if(v==0) return "0"; uint256 t=v; uint256 d; while(t!=0){d++;t/=10;} bytes memory b=new bytes(d); while(v!=0){d-=1; b[d]=bytes1(uint8(48+v%10)); v/=10;} return string(b); }
}
